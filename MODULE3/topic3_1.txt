Lists provide a general way to store collections of different objects indexed by numbers. The elements that a list holds are arbitrary; they can be numeric or string values, functions, user-defined objects, or even other lists. Using lists, it is very easy to implement complex data structures.
To create a list in the Python interpreter or in a Python script, you surround the comma-separated list of the elements with square brackets ([]). Thus, a simple list of numbers can be constructed like this:
>>> numbers = [1,7,9,8,3,14] 
If your list spans multiple lines of input, you can add a newline after any of the commas and continue the list on the next line. To create an empty list -- for instance, to initialize a variable that you plan on using as a list -- use empty square brackets.
>>> newlist = [] 
The elements of a list don't need to be of the same types. For example, the following list contains numbers, strings, another list, and a function:
>>> mixlist = [1,'dog','tree',[10,12,15],-18,abs]
>>> print(mixlist)
[1, 'dog', 'tree', [10, 12, 15], -18, <built-in function abs>] 
As the above output shows, when a list contains an element that doesn't have a simple print representation (the abs function here), Python prints a description of the object inside angle brackets.
Elements of a list are extracted by providing an index number inside square brackets after the name of the list. (Remember that the first element of a list has the index 0.) The elements behave exactly as individual objects would behave. Using the list mixlist defined in the previous example, we could invoke the abs function on the fifth element of the list with the expression
>>> mixlist[5](mixlist[4])
18 
Or, we could print the first letter of the second element of mixlist as follows:
>>> mixlist[1][0]
d 
