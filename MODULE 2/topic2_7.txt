Two of the most important tasks in text processing are: 1) breaking a line of text apart into words or tokens (the split method) and 2) combining several of those pieces into a single character string (the join method).
The split method operates on a character string and returns a list whose elements are the words from that string. When no arguments are passed to the method, the default behavior of split is to split the string at every occurrence of one or more whitespace characters (space, tab, or newline). If you provide a single argument to split, each occurrence of that argument will be used to split the string.
In the example below, there's a double space after the word Ministry. Note the subtle difference between the default behavior and explicitly specifying a space as the delimiter.
>>> str = 'Ministry  of Silly Walks' >>> str.split() ['Ministry', 'of', 'Silly', 'Walks'] >>> str.split(' ') ['Ministry', '', 'of', 'Silly', 'Walks']
Under the default behavior, the multiple spaces in the string are treated as a single separator, while explicitly specifying a blank causes an empty element to be added to the list when multiple blanks are encountered.
The split method also accepts an additional argument called maxsplit, which returns a list with at most maxsplit + 1 elements. The first maxsplit elements are what the split method would normally return, and the last element is a single character string containing the rest of the original string. Some versions of Python will not accept a named argument for this parameter; in that case, you would need to explicitly pass a separator as the first argument, using None to obtain the default behavior.
>>> str = 'Ministry of Silly Walks' ['Ministry', 'of', 'Silly', 'Walks'] >>> str.split(' ', 2) ['Ministry', 'of', 'Silly Walks'] >>> str.split(' ', 1) ['Ministry', 'of Silly Walks'] >>> str.split(' ', 0) ['Ministry of Silly Walks'] >>> str.split(None, 1) ['Ministry', 'of Silly Walks'] >>> str.split(None, 2) ['Ministry', 'of', 'Silly Walks'] >>> str.split(None, 3) ['Ministry', 'of', 'Silly', 'Walks']
The join method essentially reverses what split does by taking a list of character strings, combining the pieces while inserting a separator between each pair, and returning a single character string. The separator that is used is the value of the character string on which the method is invoked, resulting in some unusual looking statements:

>>> words = ['spam','spam','bacon','spam']
>>> ' '.join(words)
'spam spam bacon spam' 
Of course, if you don't like the form used in the example, you can create a variable with another separator.
Notice that the list is passed as an argument to the method that operates on the separator string. The separator is not limited to a single character; any character string is acceptable.
>>> words = ['spam','spam','bacon','spam']
>>> ' and '.join(words)
'spam and spam and bacon and spam' 
