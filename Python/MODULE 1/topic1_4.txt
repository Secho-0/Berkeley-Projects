No matter how carefully you write your programs, errors will occur. Python has a consistent way to deal with them; it "raises an exception" and sends a signal to the program that tells it to stop.
If the story ended there, Python's error handling wouldn't be very noteworthy. But anytime you see an error message that was generated by Python, you can use a try/except clause to trap the error and process it any way you like. Without this kind of error handling, programmers must spend a great deal of time explaining how the various components of a program will inform the rest of the program that an error has occurred -- and how to deal with errors that are generated by other parts of the program.
As a simple example, consider the act of dividing by zero. In many computer languages (Python included), a program that divides by zero will generate an error message, possibly terminating the program's execution. Here's an example of what happens in Python:
>>> y = 5./0.
Traceback (most recent call last):
File "<stdin>", line 1, in ?
ZeroDivisionError: float division 
In the interpreter, you're simply prompted for another Python statement, but if such a division occurs inside a program, the program will terminate. Suppose you want to set the result of a division by zero to 0 and print a message to that effect. Using the try/except clause, that is very easy to do:
>>>  try:
...y = 5/0
except ZeroDivisionError:
...y = 0
...print('y set to zero due to division by zero.')
...
y set to zero due to division by zero.
The name in the except clause matches the name of the error that was printed in the default error message. Thus, any error message can be suppressed, and execution of the program would resume right after the body of the try/except clause.
