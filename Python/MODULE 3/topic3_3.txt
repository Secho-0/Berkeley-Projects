Lists in Python have other similarities to strings. In particular, the len function returns the number of elements in a list, the + operator performs concatenation, and the * operator performs repetition. (You can convert a string to a list whose elements are the characters in the string by using the list() function.)
When you use these operators on a list, both operands must be lists. Thus, we can't add an element to the end of a list by simply concatenating a scalar value; even if we wish to add a single element, it must be made into a list by surrounding it with brackets. Here is an example:
>>> x + 15
Traceback (most recent call last):
  File "<pyshell#36>",  line 1, in <module>
      x + 15
TypeError: can only concatenate list (not "int") to  list
>>> x + [15]
[1, 5, 9, 13, 15] 
The same is true for repetition. Python will interpret scalars as ordinary numbers but will create lists with all the elements of the original list repeated when the * operator is applied to a list.
>>> 5 * 0
0
>>> 5 * [0]
[0, 0, 0, 0, 0] 
As the example shows, a scalar value can temporarily be made into a list by surrounding it with square brackets.
The in operator can be used to determine if a particular value is an element of a list. It returns True if the element is found and False otherwise. Remember that the in operator looks at each element of the list but not the values within those elements.
>>>  prices = [['apple',.25],['banana',.30],['orange',.25]]
>>> 'apple' in prices
False
>>> ['apple',.25] in prices
True 
Even though the string 'apple' was contained in an element of the list, the in operator does not return True unless a complete list element is specified.
