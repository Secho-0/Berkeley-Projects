When you assign the value of one list to another, Python does not actually copy the elements of the original list to the copy; instead it "remembers" where the original list was and operates on the original list whenever you refer to the copy. A simple example will make this clear.
>>> pets = ['dog','cat','rabbit','bird','duck']
>>> animals = pets
>>> pets.append('goldfish')
>>> animals
['dog', 'cat', 'rabbit', 'bird', 'duck', 'goldfish'] 
Notice that when we appended the value of 'goldfish' to the pets list, it also got appended to the animals list.
If you really want to make a copy of a list, you can do it essentially by using a slice of the list that includes all its elements: specify a subscript of simply a colon (:). Because no starting or ending subscript is supplied in this case, Python defaults to using the entire list, and a true copy will be made. Notice the difference in the animals list when we copy the pets list to it in this way:
>>> pets = ['dog','cat','rabbit','bird','duck']
>>> animals = pets[:]
>>> pets.append('goldfish')
>>> animals
['dog', 'cat', 'rabbit', 'bird', 'duck'] 
Now, changes in the pets list have no effect on the animals list, since a true copy was made. The copy module provides this same functionality as well as the ability to make true copies of more complex data structures.
We'll look at the append function applied as a method in a moment. First, let's stop to take a look at object orientation and methods as they are used on lists.
